"Represents Econt office address"
type EcontOfficeAddress {
  "The street address / first line"
  address1: String!

  "Optional second line"
  address2: String

  "City"
  city: String!

  "Optional company name, if it's a business address"
  company: String

  "Country"
  country: String!

  "Is this the default address for billing purposes?"
  isBillingDefault: Boolean

  "Is this a commercial address?"
  isCommercial: Boolean!

  "Is this the default address to use when selecting a shipping address at checkout?"
  isShippingDefault: Boolean

  "Arbitrary additional metadata about this address"
  metafields: [Metafield]

  "Postal code"
  postal: String!

  "Region. For example, a U.S. state"
  region: String!
}

type EcontOffice implements Node {
  "The office ID"
  _id: ID!
  code: String!
  name: String,
  nameEn: String,
  address: EcontOfficeAddress,
  phones: [String],
}

"A connection edge in which each node is a `EcontOffice` object"
type EcontOfficeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The econt office"
  node: EcontOffice
}

"""
Wraps a list of `CatalogItem`s, providing pagination cursors and information.

For information about what Relay-compatible connections are and how to use them, see the following articles:
- [Relay Connection Documentation](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#connections)
- [Relay Connection Specification](https://facebook.github.io/relay/graphql/connections.htm)
- [Using Relay-style Connections With Apollo Client](https://www.apollographql.com/docs/react/recipes/pagination.html)
"""
type EcontOfficeConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [EcontOfficeEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [EcontOffice]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

extend type Query {
  econtOffices(
    "Optional text search query"
    searchQuery: String,

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor,

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor,

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int,
  ): EcontOfficeConnection
}
